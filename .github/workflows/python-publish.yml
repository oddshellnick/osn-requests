name: Publish Python Package on PyPI

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Get version from setup.py
        id: setup_version
        run: |
          SETUP_PY_VERSION=$(grep "version=" setup.py | sed -E "s/.*version=['\"]([^'\"]+)['\"].*/\1/")
          if [[ -z "$SETUP_PY_VERSION" ]]; then
            echo "Version not found in setup.py"
            exit 1
          fi
          echo "SETUP_PY_VERSION=$SETUP_PY_VERSION" >> "$GITHUB_OUTPUT"

      - name: Print release tag name and setup.py version
        run: |
          echo "Release tag name: ${GITHUB_REF_NAME}"
          echo "Version from setup.py: ${{ steps.setup_version.outputs.SETUP_PY_VERSION }}"

      - name: Determine PyPI repository and validate tag and version
        id: pypi_repo
        run: |
          RELEASE_TAG_NAME="${GITHUB_REF_NAME}"
          SETUP_PY_VERSION="${{ steps.setup_version.outputs.SETUP_PY_VERSION }}"

          if [[ "$RELEASE_TAG_NAME" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            TAG_VERSION="${RELEASE_TAG_NAME:1}" # Remove 'v' prefix
            PYPI_REPO="PyPI"
            REPO_URL="https://upload.pypi.org/legacy/"
            PYPI_TOKEN="PYPI_TOKEN"
            RELEASE_TYPE="stable"
          elif [[ "$RELEASE_TAG_NAME" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)-beta\.([0-9]+)$ ]]; then
            TAG_VERSION="${RELEASE_TAG_NAME:1}" # Remove 'v' prefix
            PYPI_REPO="Test PyPI"
            REPO_URL="https://test.pypi.org/legacy/"
            PYPI_TOKEN="TEST_PYPI_TOKEN"
            RELEASE_TYPE="beta"
          else
            echo "::error::Invalid release tag format: $RELEASE_TAG_NAME. Tag must be in vx.y.z or vx.y.z-beta.n format."
            exit 1 # Fail the workflow if tag format is invalid
          fi

          if [[ "$TAG_VERSION" != "$SETUP_PY_VERSION" ]]; then
            echo "::error::Version mismatch: Version in tag ($TAG_VERSION) does not match version in setup.py ($SETUP_PY_VERSION)."
            exit 1 # Fail the workflow if versions do not match
          fi

          echo "repository-url=$REPO_URL" >> "$GITHUB_OUTPUT"
          echo "PYPI_TOKEN_SECRET=$PYPI_TOKEN" >> "$GITHUB_OUTPUT"
          echo "PYPI_REPO_NAME=$PYPI_REPO" >> "$GITHUB_OUTPUT"
          echo "Publishing to $PYPI_REPO for $RELEASE_TYPE release: $RELEASE_TAG_NAME"
          echo "Release Tag Name: $RELEASE_TAG_NAME, Setup.py Version: $SETUP_PY_VERSION"

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ steps.pypi_repo.outputs.repository-url }}
          username: __token__